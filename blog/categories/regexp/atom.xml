<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Regexp | 世界的审美！]]></title>
  <link href="http://mvj3.github.io/blog/categories/regexp/atom.xml" rel="self"/>
  <link href="http://mvj3.github.io/"/>
  <updated>2014-09-21T23:50:40+08:00</updated>
  <id>http://mvj3.github.io/</id>
  <author>
    <name><![CDATA[mvj3]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[个性域名正则表达式]]></title>
    <link href="http://mvj3.github.io/2013/01/23/individual-domain-regexp/"/>
    <updated>2013-01-23T16:35:34+08:00</updated>
    <id>http://mvj3.github.io/2013/01/23/individual-domain-regexp</id>
    <content type="html"><![CDATA[<p>老大提了个用单个正则表达式来匹配个性域名ID的需求，具体是：3-15个字符，可以用[a-z0-9_-]字符，必须用数字或者字母开头，且不能是纯数字</p>

<p>让我们来分步化解
对于，3-15个字符，可以用[a-z0-9_-]字符，稍微了解点正则表达式的同学马上就可以写出如下正则</p>

<p><code>ruby
/^[a-z0-9_\-]{3,15}$/i
</code></p>

<p>让我们来再加一个条件，必须用数字或者字母开头
<code>ruby
/^[0-9a-z][a-z0-9_\-]{2,14}$/i
</code></p>

<p>最后一个条件是，且不能是纯数字。</p>

<p>最初我大概的想到是用 或(|) 来做，一个是数字开头，另一个是字母开头，剩余的是否纯数字在后面判断。但这剩余里还是会遇到判断在哪个位置里已经出现了字母的问题。所以这里就需要正则表达式里非匹配获取的功能了。</p>

<p>维基百科里给出的是 (?=pattern) ，它表示 匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符「(|)」来组合一个模式的各个部分是很有用。例如「industr(?:y|ies)」就是一个比「industry|industries」更简略的表达式。具体见 <a href="http://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">http://zh.wikipedia.org/wiki/正则表达式</a></p>

<p>stackoverflow里有更通俗的例子 <a href="http://stackoverflow.com/questions/1559751/regex-to-make-sure-that-the-string-contains-at-least-one-lower-case-char-upper">http://stackoverflow.com/questions/1559751/regex-to-make-sure-that-the-string-contains-at-least-one-lower-case-char-upper</a>
<code>text
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*(_|[^\w])).+$
A short explanation:
^                  // the start of the string
(?=.*[a-z])        // use positive look ahead to see if at least one lower case letter exists
(?=.*[A-Z])        // use positive look ahead to see if at least one upper case letter exists
(?=.*\d)           // use positive look ahead to see if at least one digit exists
(?=.*[_\W])        // use positive look ahead to see if at least one underscore or non-word character exists
.+                 // gobble up the entire string
$                  // the end of the string
</code></p>

<p>这样我们就在 <code>/^[0-9a-z][a-z0-9_-]{2,14}$/i</code> 里再加上个 <code>(?=.*[a-z_\-])</code> 就可以匹配不是纯数字了
```ruby
@regexp = /^(?=.*[a-z<em>-])[0-9a-z][a-z0-9</em>-]{2,14}$/i</p>

<p>puts &ldquo;合法测试&rdquo;
%w[c11213311 mvj3 123mmmmm iceskysl 3_3].each do |str|
  puts &ldquo;#{str}   =>   #{str.match(@regexp)}&rdquo;
end</p>

<p>puts &ldquo;\n&rdquo;</p>

<p>puts &ldquo;非法测试&rdquo;
%w[123 12345 mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm _ssssss 你好].each do |str|
  puts &ldquo;#{str}   =>   #{str.match(@regexp) || &lsquo;没有匹配&rsquo;}&rdquo;
end
```</p>

<p>测试结果如下
```text
合法测试
c11213311   =>   c11213311
mvj3   =>   mvj3
123mmmmm   =>   123mmmmm
iceskysl   =>   iceskysl
3_3   =>   3_3</p>

<p>非法测试
123   =>   没有匹配
12345   =>   没有匹配
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm   =>   没有匹配
_ssssss   =>   没有匹配
你好   =>   没有匹配
```</p>

<h2>Ruby-China上的讨论 <a href="http://ruby-china.org/topics/8383">http://ruby-china.org/topics/8383</a></h2>

<p>我景仰的大牛 @luikore 给出了易读版</p>

<p><code>ruby
/\A
  (?=.*[a-z_\-])    # 不能全是数字
  [0-9a-z]          # 必须用数字或者字母开头
  [a-z0-9_\-]{2,14} # 3-15个字符，可以用[a-z0-9_\-]字符
\z/xi
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用C的sscanf和Ruby的正则表达式解析nginx日志性能对比]]></title>
    <link href="http://mvj3.github.io/2012/12/13/compare-the-performance-of-parsing-nginx-log-via-c-sscanf-and-ruby-regexp/"/>
    <updated>2012-12-13T12:18:30+08:00</updated>
    <id>http://mvj3.github.io/2012/12/13/compare-the-performance-of-parsing-nginx-log-via-c-sscanf-and-ruby-regexp</id>
    <content type="html"><![CDATA[<p>```ruby
require &lsquo;rubygems&rsquo;
require &lsquo;inline&rsquo;</p>

<p>class ParseLogInC
  inline do |builder|</p>

<pre><code>builder.c &lt;&lt;-CODE
  #include 'ruby.h'
  #include 'stdio.h'f
  static VALUE nginx(VALUE line) {
    VALUE ary = rb_ary_new();

    int lt = strlen(STR2CSTR(line));
    char ip_str[24], time_str[26], path[lt &gt; 200 ? lt : 200], i1[4], i2[lt/4];
    sscanf(STR2CSTR(line), "%s - - [%s +0800] %s %s %s", ip_str, time_str, i1, path, i2);
    rb_ary_push(ary, rb_str_new2(ip_str));
    rb_ary_push(ary, rb_str_new2(time_str));
    rb_ary_push(ary, rb_str_new2(path));

    return ary;
  }
CODE
</code></pre>

<p>  end
end</p>

<p>NginxLogRegexp = Regexp.new [
  &lsquo;((?:\d+.){3}\d+)&rsquo;, # ip
  &lsquo;[\ &ndash;]<em>&rsquo;,
  &lsquo;[(.</em>?)]&rsquo;, # [$time_local]
  &lsquo;[\&ldquo; ]<em>&rsquo;,
  &lsquo;([A-Z]</em>) &rsquo;, # HTTP verb
  &lsquo;(.*)&rsquo;, # url
].join</p>

<p>@plc = ParseLogInC.new
[%q(123.159.55.238 &ndash; &ndash; [28/Aug/2012:00:02:11 +0800] &ldquo;GET //app?id=26964&amp;client_id=142&amp;channel_id=350 HTTP/1.1&rdquo; 302 0 &ldquo;&ndash;&rdquo; &ldquo;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&rdquo; &ldquo;&ndash;&rdquo; &mdash;&mdash; download.eoemarket.com),</p>

<pre><code>%q(113.108.11.51 - - [26/Sep/2012:11:12:46 +0800] "GET //app?id=96061&amp;client_id=140&amp;channel_id=319 HTTP/1.1" 302 0 "http://s.myapp.com/dw_stats.jsp?dt=0&amp;sid=AevJEO5AXd56AEqHdh0oAIlG&amp;sn=4&amp;idx=0&amp;siteId=4&amp;apkid=154699&amp;st=0&amp;url=sHdmymPs30ZhvM4YgPxtls6Sl2gYu8dlvbX4xbgOYKjIcB7FqAKXQLATVWAKd0FGCdLEmN%2FB%2FD%2BF%0AtH7nT7X9TWHPqokJ5nFE2YCDnMBkFNM%3D&amp;key=%E6%89%8B%E6%9C%BA%E6%89%93%E7%A2%9F%E6%9C%BA" "MQQBrowser/3.5/Adr (Linux; U; 2.3.6; zh-cn; HUAWEI U8661 Build/U8661V100R001C17B827;320*480)" "211.138.243.113" ---- download.eoemarket.com),
%q(117.136.15.146 - - [26/Sep/2012:17:19:58 +0800] "GET /app?id=27034&amp;client_id=12&amp;channel_id=201&amp;uniquely_code=333228032439999999990&amp;w=480&amp;dpi=240&amp;sdk=15&amp;brand=alps&amp;product_id=MX9984K&amp;model=e1809c_v75_gq1008_9p017&amp;product=e1809c_v75_gq1008_9p017&amp;locale=zh_CN&amp;version_code=30&amp;uniquely_code=359220438409074&amp;channel_key=paU3GRB4hk9zOT3gmTTGA&amp;api_key=jPo2Fs9C5a33c9TRNJTPxw&amp;nonce=ef306825998be5dexeb1f6lv0a1b5fca49f8a99a&amp;timestamp=1339080849896&amp;api_sig=d7ew8f2fc5e90dc9e4e0899b7e87o896 HTTP/1.1" 404 3 "-" "Dalvik/1.6.0 (Linux; U; Android 4.0.3; e1809c_v75_gq1008_9p017 Build/IML74K)" "-" ---- download.eoemarket.com)
</code></pre>

<p>].each do |line|
  l1, l2 = line.split(&ldquo;HTTP/&rdquo;)
  t1 = Time.now; @plc.nginx(l1); puts &ldquo;c #{(Time.now &ndash; t1).to_f<em>100</em>100}&rdquo;
  t2 = Time.now; oa = l1.match(NginxLogRegexp).captures; ary = [oa[0], oa[1], oa[2]]; puts &ldquo;r #{(Time.now &ndash; t2).to_f<em>100</em>100}&rdquo;
end</p>

<p><strong>END</strong>
c 0.14
r 0.37
c 0.04
r 0.1
c 0.05
r 1.42
```</p>
]]></content>
  </entry>
  
</feed>
