<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Nginx | 世界的审美！]]></title>
  <link href="http://mvj3.github.io/blog/categories/nginx/atom.xml" rel="self"/>
  <link href="http://mvj3.github.io/"/>
  <updated>2013-07-08T20:51:32+08:00</updated>
  <id>http://mvj3.github.io/</id>
  <author>
    <name><![CDATA[mvj3]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unicorn 和 Nginx 部署Rails应用的 css, js, img 等静态资源缓存使用总结]]></title>
    <link href="http://mvj3.github.io/2012/12/14/the-usage-summary-of-deploy-rails-css-js-img-etc-static-cached-assets-via-unicorn-and-nginx/"/>
    <updated>2012-12-14T09:41:54+08:00</updated>
    <id>http://mvj3.github.io/2012/12/14/the-usage-summary-of-deploy-rails-css-js-img-etc-static-cached-assets-via-unicorn-and-nginx</id>
    <content type="html"><![CDATA[<h2>nginx方案</h2>

<p>接上文 <a href="https://gist.github.com/4174674">Rails动态文件添加ETag缓存</a> 来自动生成304 Not Modified告诉客户端来直接使用本地缓存，但是在这种情况下会出现图片闪动（重新加载渲染），影响用户体验。除了Etag这种通过和服务器进行HTTP头部比对来实现缓存的策略外，还可以采用Cache-control来通知浏览器在一段时间内不必重新请求服务器而直接本地缓存。配置 nginx.conf 如下:</p>

<p>```nginx</p>

<h1>使用root用户来避免文件权限问题而导致403错误</h1>

<p>user  root nginx;</p>

<h1>在server { } 里加入Cache-Control声明</h1>

<p>location ~ ^/(assets)/  {<br/>
  gzip_static on;<br/>
  expires     1h;<br/>
  add_header  Cache-Control public;<br/>
}<br/>
```</p>

<p>配置 config/environments/production.rb 如下:
```ruby</p>

<h1>Disable Rails&rsquo;s static asset server (Apache or nginx will already do this)</h1>

<p>config.serve_static_assets = false</p>

<h1>Compress JavaScripts and CSS</h1>

<p>config.assets.compress = true</p>

<h1>Don&rsquo;t fallback to assets pipeline if a precompiled asset is missed</h1>

<p>config.assets.compile = true</p>

<h1>Generate digests for assets URLs</h1>

<p>config.assets.digest = true</p>

<h1>指定需要预先编译的css和js</h1>

<p>config.assets.precompile += %w[js css].map {|ext| Dir[Rails.root.join(&ldquo;app/assets/<em>/</em>.#{ext}&rdquo;)] }.flatten.map {|f| f.split(&lsquo;/&rsquo;)[-1] }<br/>
```</p>

<p>每次重新部署前运行RAILS_ENV=production bundle exec rake assets:precompile 来重新生成静态资源缓存</p>

<h2>Rack方案</h2>

<p><a href="https://github.com/mvj3/rack_image_assets_cache_control/">https://github.com/mvj3/rack_image_assets_cache_control/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用C的sscanf和Ruby的正则表达式解析nginx日志性能对比]]></title>
    <link href="http://mvj3.github.io/2012/12/13/compare-the-performance-of-parsing-nginx-log-via-c-sscanf-and-ruby-regexp/"/>
    <updated>2012-12-13T12:18:30+08:00</updated>
    <id>http://mvj3.github.io/2012/12/13/compare-the-performance-of-parsing-nginx-log-via-c-sscanf-and-ruby-regexp</id>
    <content type="html"><![CDATA[<p>```ruby
require &lsquo;rubygems&rsquo;
require &lsquo;inline&rsquo;</p>

<p>class ParseLogInC
  inline do |builder|</p>

<pre><code>builder.c &lt;&lt;-CODE
  #include 'ruby.h'
  #include 'stdio.h'f
  static VALUE nginx(VALUE line) {
    VALUE ary = rb_ary_new();

    int lt = strlen(STR2CSTR(line));
    char ip_str[24], time_str[26], path[lt &gt; 200 ? lt : 200], i1[4], i2[lt/4];
    sscanf(STR2CSTR(line), "%s - - [%s +0800] %s %s %s", ip_str, time_str, i1, path, i2);
    rb_ary_push(ary, rb_str_new2(ip_str));
    rb_ary_push(ary, rb_str_new2(time_str));
    rb_ary_push(ary, rb_str_new2(path));

    return ary;
  }
CODE
</code></pre>

<p>  end
end</p>

<p>NginxLogRegexp = Regexp.new [
  &lsquo;((?:\d+.){3}\d+)&rsquo;, # ip
  &lsquo;[\ &ndash;]<em>&rsquo;,
  &lsquo;[(.</em>?)]&rsquo;, # [$time_local]
  &lsquo;[\&ldquo; ]<em>&rsquo;,
  &lsquo;([A-Z]</em>) &rsquo;, # HTTP verb
  &lsquo;(.*)&rsquo;, # url
].join</p>

<p>@plc = ParseLogInC.new
[%q(123.159.55.238 &ndash; &ndash; [28/Aug/2012:00:02:11 +0800] &ldquo;GET //app?id=26964&amp;client_id=142&amp;channel_id=350 HTTP/1.1&rdquo; 302 0 &ldquo;&ndash;&rdquo; &ldquo;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&rdquo; &ldquo;&ndash;&rdquo; &mdash;&mdash; download.eoemarket.com),</p>

<pre><code>%q(113.108.11.51 - - [26/Sep/2012:11:12:46 +0800] "GET //app?id=96061&amp;client_id=140&amp;channel_id=319 HTTP/1.1" 302 0 "http://s.myapp.com/dw_stats.jsp?dt=0&amp;sid=AevJEO5AXd56AEqHdh0oAIlG&amp;sn=4&amp;idx=0&amp;siteId=4&amp;apkid=154699&amp;st=0&amp;url=sHdmymPs30ZhvM4YgPxtls6Sl2gYu8dlvbX4xbgOYKjIcB7FqAKXQLATVWAKd0FGCdLEmN%2FB%2FD%2BF%0AtH7nT7X9TWHPqokJ5nFE2YCDnMBkFNM%3D&amp;key=%E6%89%8B%E6%9C%BA%E6%89%93%E7%A2%9F%E6%9C%BA" "MQQBrowser/3.5/Adr (Linux; U; 2.3.6; zh-cn; HUAWEI U8661 Build/U8661V100R001C17B827;320*480)" "211.138.243.113" ---- download.eoemarket.com),
%q(117.136.15.146 - - [26/Sep/2012:17:19:58 +0800] "GET /app?id=27034&amp;client_id=12&amp;channel_id=201&amp;uniquely_code=333228032439999999990&amp;w=480&amp;dpi=240&amp;sdk=15&amp;brand=alps&amp;product_id=MX9984K&amp;model=e1809c_v75_gq1008_9p017&amp;product=e1809c_v75_gq1008_9p017&amp;locale=zh_CN&amp;version_code=30&amp;uniquely_code=359220438409074&amp;channel_key=paU3GRB4hk9zOT3gmTTGA&amp;api_key=jPo2Fs9C5a33c9TRNJTPxw&amp;nonce=ef306825998be5dexeb1f6lv0a1b5fca49f8a99a&amp;timestamp=1339080849896&amp;api_sig=d7ew8f2fc5e90dc9e4e0899b7e87o896 HTTP/1.1" 404 3 "-" "Dalvik/1.6.0 (Linux; U; Android 4.0.3; e1809c_v75_gq1008_9p017 Build/IML74K)" "-" ---- download.eoemarket.com)
</code></pre>

<p>].each do |line|
  l1, l2 = line.split(&ldquo;HTTP/&rdquo;)
  t1 = Time.now; @plc.nginx(l1); puts &ldquo;c #{(Time.now &ndash; t1).to_f<em>100</em>100}&rdquo;
  t2 = Time.now; oa = l1.match(NginxLogRegexp).captures; ary = [oa[0], oa[1], oa[2]]; puts &ldquo;r #{(Time.now &ndash; t2).to_f<em>100</em>100}&rdquo;
end</p>

<p><strong>END</strong>
c 0.14
r 0.37
c 0.04
r 0.1
c 0.05
r 1.42
```</p>
]]></content>
  </entry>
  
</feed>
