<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | 世界的审美！]]></title>
  <link href="http://mvj3.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://mvj3.github.io/"/>
  <updated>2013-12-23T11:47:41+08:00</updated>
  <id>http://mvj3.github.io/</id>
  <author>
    <name><![CDATA[mvj3]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails项目 重构，我在阳光书屋的三个月]]></title>
    <link href="http://mvj3.github.io/2013/12/16/refectoring-code-at-sunshine-library-in-three-months/"/>
    <updated>2013-12-16T12:26:00+08:00</updated>
    <id>http://mvj3.github.io/2013/12/16/refectoring-code-at-sunshine-library-in-three-months</id>
    <content type="html"><![CDATA[<h2>背景介绍</h2>

<p>在 <a href="http://www.sunshine-library.org">阳光书屋的官网</a> 上写着，“阳光书屋乡村信息教育化行动是一项公益教育计划，我们致力于用科技填补城乡教育鸿沟，以平板电脑为载体，让每一个农村的孩子都接触到优质的教育资源。” 学生和老师用的平板电脑学习机是基于Android移动开源系统的"晓书"，通过独立研发的阳光桌面OEM定制学习环境，并包含阳光电子书包和阳光学习提高班等App来开展混合式教学模式。</p>

<p>而支撑其后台的便是Ruby on Rails这套Web开发框架，到目前为止经历了三代架构的变迁。当我以Ruby架构师角色在八月底进入书屋时，随着秋季的开学，项目也在紧张地进行着包括新功能后期收尾，迁移到MongoDB数据库重构，和提高班数据系分析新系统 等工作。@renchaorevee 和 @Logicalmars 两位志愿开发者主要负责了测试相关的工作。</p>

<p>重构的事稍后再行一一细说，先简单的过一下前面两代。</p>

<h2>第一代Rails架构</h2>

<p>单独一个Rails程序，借用其中一个志愿开发者 @Logicalmars 的话说，就是"主要用Ruby on Rails写服务器后台。我们这开发人员不多，很多东西都得自己搞，我不光更加理解了RoR，还顺便学习了如何架设Rails的服务器，如何做MySQL Replication，如何向安卓端同步数据库Table等等"。</p>

<h2>第二代Rails架构</h2>

<p>随着业务的细化，需求逐渐被明朗细化为LocalServer和CloudServer两大块。</p>

<p>从网络层面上说，LocalServer搭在学校当地以提供快速的网络响应，CloudServer搭在阿里云上去管理协调各LocalServer，两者通过VPN串联起来位于同一网络中以保证信息的安全。</p>

<p>从业务层面上说，LocalServer提供的功能包括晓书的电子书包等API通讯，设备管理，教师备课和查看学生数据等。CloudServer提供的功能包括各LocalServer管理，提高班和App等公用资源的分发和中转，查看跨校统计数据等。这方面就不展开细说了，主要是为下面的技术和重构提供一些背景概念。</p>

<p>根据其分布式特点，采用了MongoDB数据库，在保留_id主键时同时使用了全局唯一的 <a href="http://en.wikipedia.org/wiki/Universally_unique_identifier">uuid</a> 键作为CloudServer和众LocalServer的资源共享管理的依据。</p>

<p>等业务需求大概确定下来后，剩下来的就是如何用技术实现之，并可以适当的随着业务需求发生变动而更好的迭代之。</p>

<h2>第二代Rails架构和第三代重构，如何挖坑和填坑</h2>

<h3>面临的挑战</h3>

<p>在 [背景介绍] 的最后提到，我进入该项目时，已经处于紧张的项目上线期。简单的形容一下就是，</p>

<ul>
<li>维护一个项目难，</li>
<li>维护一个二手项目难，</li>
<li>维护一个臃肿的二手项目更难，</li>
<li>维护一个开发中的臃肿的二手项目更难，</li>
<li>维护一个有紧急上线或BUG修复的开发中的臃肿的二手项目非常难。</li>
</ul>


<p>完全展开按照线性叙事来讲就太琐碎了，为了给第三者理解上的方便，还是就以下几个重点来分享一下吧。</p>

<h3>Rails 拆分和合并</h3>

<p>问题：</p>

<p>在第二代，书屋把Rails程序剥离为LocalServer和CloudServer两个Rails应用程序。代码物理上的分拆虽然带来了从业务去理解技术上的一些好处，但是冗余的问题随之而来，模型和视图上的占了多数，而这个同时保持两份修改显然不是明知之举。事实证明有些BUG确实是因为两边数据结构没有修改一致导致的，甚至有些相同的字段在两边都有不同的存储形式。</p>

<p>解答：</p>

<p>Local和Cloud合为一个Rails项目，代码或模块用全局变量判断载入。</p>

<ol>
<li>在 <code>config/initializers/constants.rb</code> 里建立全局变量，比如 <code>$IS_LOCAL_SERVER</code>, <code>$IS_CLOUD_SERVER</code> 等。</li>
<li>公用的 <code>models</code> 按照Rails约定放在app/models目录下，各自环境的功能分别放在 <code>lib/models/local</code> 和 <code>lib/models/cloud</code> 目录下。载入过程在 <code>(Rails::Application).load_extend_model_features</code> 方法，分别可通过 Mongoid::Sunshine 模块 和 ApplicationController重载 实现动态载入。</li>
<li>routes, controller, views等还是按照Rails约定走，唯一区别是在代码里用全局变量判断载入。</li>
<li>目前Production, Development, 以及部署模式已完全兼容Rails默认约定。</li>
</ol>


<p>相关技术细节披露：</p>

<p>```ruby</p>

<h1>定义Model功能依不同环境动态载入</h1>

<p>def (Rails::Application).load_extend_model_features
  Dir[Rails.root.join(&ldquo;lib/models/#{LocalCloud.short_name}/*.rb&rdquo;)].each do |path|</p>

<pre><code># load appended feature if the model already exists.
next if not Object.constants.include?(path.match(/([a-z\_]*).rb/)[1].classify.to_sym)
(Rails.env == 'production') ? require(path) : load(path)
</code></pre>

<p>  end
end if defined? Rails</p>

<h1>配置最公用的Mongoid::Sunshine，直接替换默认的Mongoid::Document。</h1>

<p>module Mongoid
  module Sunshine</p>

<pre><code>extend ActiveSupport::Concern
included do
  include Mongoid::Document
  include Mongoid::Timestamps
  include Mongoid::TouchParentsRecursively
  include Mongoid::Paranoia
  include Mongoid::UUIDGenerator
  include Mongoid::SyncWithDeserialization if $IS_LOCAL_SERVER
  include ActiveModel::IsLocalOrCloud
  include ActiveModel::AsJsonFilter
  include Mongoid::ManyOrManytomanySetter

  include Mongoid::DistributeTree if (not self.name.match(/ETL::/)) # 排除同步ETL
  include Mongoid::ChapterZipStyle if %W[Chapter Lesson Activity Material Problem ProblemChoice].include? self.name

  # autoload app/models/cloud|local/*.rb
  (Rails::Application).load_extend_model_features

  include Mongoid::OverwriteDefaultFeatures
end
</code></pre>

<p>  end
end</p>

<h1>在development模式下动态载入Model</h1>

<p>class ApplicationController &lt; ActionController::Base
  # load cloud and local features model exclusively
  before_filter do</p>

<pre><code>(Rails::Application).load_extend_model_features
</code></pre>

<p>  end if Rails.env != &lsquo;production&rsquo;
end
```</p>

<p>要提一点的是，除了测试可以帮你解决重构是否无误的问题外，请活用 <code>git grep</code> 来分析相关的代码调用。</p>

<h3>阳光电子书包的同步更新 自动策略</h3>

<p>晓书上的电子书包是按 科目(1) &lt;&ndash; 章节(n) &lt;&ndash; 课时(n) 的组织结构去划分的，每种富媒体资源都是以文件夹形式挂载在最下面的课时节点上。一旦某课时发生变动，就更新自己级其上的章节和科目的时间戳。这样客户端可以定时请求LocalServer，依据时间戳去更新对应结构和数据（删除操作由结构树自己来管理更新）。</p>

<p>之前的解决方案由于文件夹的内容类型比较复杂，且在Controller和Model等多处都有操作，没有统一的分层机制，所以对于时间戳更新的遗漏难免。</p>

<p>对此我的解决方案是写了Mongoid的一个插件mongoid_touch_parents_recursively，它依赖Mongoid Model间的关系声明来在 <code>after_save</code> 钩子里更新，并解决了多对多和一对多等关系。具体原理请见 <a href="https://github.com/mvj3/mongoid_touch_parents_recursively/blob/sunshine/lib/mongoid_touch_parents_recursively.rb">实现文件描述</a> 和 <a href="https://github.com/mvj3/mongoid_touch_parents_recursively">README配置文档</a> 。</p>

<h3>课程压缩包的内容优雅的解压缩</h3>

<p>在线教育相比其他社交和电子商务等行业，多类型结构的课程数据包含了各种形式的文本，逻辑关联和多媒体文件等，因此提高班的产品owner @fxp 设计了基于JSON格式和文件目录的SchemeFolder来灵活管理课程数据。在导入后台过程中出现了解压缩相关处理代码和课程数据组织逻辑混淆的场面，给二次维护带来一些难解。</p>

<p>对此我在 <a href="http://mvj3.github.io/2013/12/15/human-mind-and-software-engineering/">人类思维和软件工程学</a> 的 #框架之后# 一节中对这次重构的策略做了详细分析，抽取了<a href="https://github.com/mvj3/mongoid_unpack_paperclip">mongoid_unpack_paperclip</a> 模块来给含有paperclip的Mongoid 支持解压缩包和清理的封装。只需要include Mongoid::Paperclip和Mongoid::UnpackPaperclip即可，然后调用 <code>self.unpack_paperclip { ... }</code> 去做对应的操作即可。</p>

<p>其中对Paperclip对象的获取是通过对 <a href="https://github.com/mvj3/mongoid_unpack_paperclip/blob/sunshine/lib/mongoid_unpack_paperclip.rb#L16">Model自省</a> 获得的。</p>

<h3>JSON API 输出的定制</h3>

<p>之前在面向移动客户端JSON API输出的开发时，有些API都是客户端按自己结构去定义的，而没有针对Model做RESTful输出，实现者用Helper方法对资源进行了递归描述，这样定义起来代码比较冗余和难以公用。限于客户端的设计，这部分只能按原来设计继续维护了。</p>

<p>在LocalServer和CloudServer都做了as_json的覆写，这里交叉公用了一些字段。因此写了 active_model_as_json_filter 来做类似<code>as_json</code> options 的配置，比如：</p>

<p><code>ruby
class App
  self.as_json_options.except.add(:classroom_ids)
end
</code></p>

<p>或者配置全局的属性配置，</p>

<p><code>ruby
ActiveModel::AsJsonFilter.finalizer_proc = lambda do |result|
 result['id'] = result['uuid'] if result['uuid']
 return result
end
</code></p>

<p>更多见 <a href="https://github.com/mvj3/active_model_as_json_filter">active_model_as_json_filter</a> 开源项目主页描述。</p>

<h3>元数据同步的数据类型兼容</h3>

<p>CloudServer到LocalServer的数据同步是通过JSON API进行的，这个在上面的前两代Rails架构已经提到了。但是里面遇到的问题是因为MongoDB数据库是SchemeLess的，而且也没有很好的对时间类型做反序列化的支持。比如你给<code>checked_at</code>时间字段赋值<code>2013-11-22 15:43:04 +0800</code>，保存的还是String类型。</p>

<p>因为时间类型的字段不单单是只有<code>created_at</code>和<code>updated_at</code>两个Rails默认的字段名，还可能有其他比如上面提到的<code>checked_at</code>，如果全部手工定制也就一团乱了，所以最好方法是在配置field时候指定type为DateTime等类型，这样也就可以对Model通过自省来获得在<code>before_save</code>时要解析的字段值了。 具体实现见 <a href="https://github.com/mvj3/mongoid_sync_with_deserialization/blob/sunshine/lib/mongoid_sync_with_deserialization.rb#L35">mongoid_sync_with_deserialization</a> 。</p>

<h3>Mongoid使用uuid字段进行Model关联</h3>

<p>在 #第二代Rails架构# 提到，书屋的资源都是用uuid来标示唯一的，这个在ActiveRecord时期即是如此。</p>

<p>而迁移到MongoDB之后，由于它是为单collection设计优化的数据库，查询操作并没有像ActiveRecord那般对模型关系处理的成熟，（个人更建议用MySQL或含有NoSQL特性HStore的PostgreSQL)。</p>

<p>有个多对多关联数据保存的BUG，在<em>id主键存在情况下，通过另外一个uuid键来做多对多，而结果却是对方保存的</em>ids是uuid，而自己保存的<em>ids却是非期待的</em>id。仔细调查发现是Mongoid没有对这种特殊情况做 <a href="https://github.com/mvj3/mongoid_many_or_many_to_many_setter/blob/sunshine/doc/mongoid.markdown">深入兼容</a> 。</p>

<p>因此我也写了 mongoid_many_or_many_to_many_setter 去利用Model之间关联关系自省在<code>before_save</code>时 <a href="https://github.com/mvj3/mongoid_many_or_many_to_many_setter/blob/sunshine/lib/mongoid_many_or_many_to_many_setter.rb#L29">重新赋值</a> 。</p>

<h3>同步机制的范式转移</h3>

<p>进入书屋后，遇到的最大问题就是服务器间数据同步不一致，黑盒子，VPN内部因传输冗余媒体文件而导致网络堵塞。</p>

<p>之前采用的技术方案组合我觉得更多是从技术层面去混搭，很明显这个犯了过度追求自己不能很好掌控的新技术，和对本身业务理解不深刻的错误。一想到多服务器高性能分发，就用了RabbitMQ的分发订阅，但是却忽略了最大的瓶颈其实在于媒体文件的传输。一想到文件传输，就用了支持异步多并发的NodeJS框架，和前者一样，本质在网络带宽限制上，以及细力度操作。更多见 <a href="https://github.com/mvj3/distribute_tree#%E5%90%8C%E6%AD%A5%E6%9E%B6%E6%9E%84%E5%8F%98%E8%BF%81%E5%8E%86%E5%8F%B2%E6%A6%82%E8%BF%B0">同步架构变迁历史概述</a> 。</p>

<p>让我们梳理数据同步的本质，从数据量和业务上考虑，可以分为，一是树的同步，二是叶子上的多媒体数据同步。</p>

<p>树的同步就是JSON元数据的同步，这是飞快的。不过它分为两种同步模式，第一种是自动同步，即在CloudServer对数据进行了CRUD后，都要马上反映到各个被要求同步的LocalServer那里去。这里有些LocalServer可能由于业务或网络问题是不需要同步的，所以得有个管理同步服务器的功能。第二种同步是手工同步，比如新增一个学校，或者一个学校因为某种原因中途中断了同步，而现在要继续同步，那么就要单独对它进行同步。从业务操作上来说，最好就是点一个按钮即可，而反映到技术层面就是必然有种组织在管理全部元数据，那这就是以School为Root，Chapter, Folder, Lesson等为层叠Children的 <a href="https://github.com/mvj3/distribute_tree">DistributeTree</a> ，其中的关系都通过Model类变量 <code>@@distribute_children</code> 得到声明，在同步时被递归访问进行，当然在自动同步模式中这个就被 <a href="https://github.com/mvj3/distribute_tree/blob/sunshine/lib/distribute_tree.rb#L20">禁用</a> 了。如前面所说，手工同步最好点一个按钮即可，但是我们这里可以在一个页面里选择多个学校和多个资源一起同步。</p>

<p>叶子上的多媒体数据同步在树的同步下就没问题了，不过一点需要注意的是最好是采用网络下行同步以保证网络速度，也即是被同步方自己请求静态资源地址。</p>

<p>总结一点，其实就和NoSQL挑战SQL的情况一样，企业对结构化数据的一致性和方便管理的需求远远大于SchemeLess和高性能。所以技术选型更多是从业务出发，让技术辅助业务，而不是因为技术的某些特性听上去和业务某些场景相符就选择了，应该按业务最本质的结构和最大比例的需求来。</p>

<h2>一些关于重构的想法</h2>

<ul>
<li>我个人现在反感给Model添加太多的逻辑，长长的上百行，几百行，我觉得最好只存在module引入的声明，字段的声明，和类似Paperclip等插件DSL的声明，其他处理都依照业务划分到不同的类和模块中。</li>
<li>很多人都误会了 <code>Fat model, skinny controller</code> 的本意，它其实只是关于重构箴言一段话里的中间一句。Fat models只是鼓励你DRY(don’t repeat yourself)，实现逻辑共享而已，其次是Model相比Controller更有利于测试，因为业务核心的处理往往都是在Model层面。推荐看 <a href="http://joncairns.com/2013/04/fat-model-skinny-controller-is-a-load-of-rubbish/">“Fat model, skinny controller” is a load of rubbish</a> 。</li>
<li>三层以上关系一般来说不宜用继承，它超过了<a href="http://mvj3.github.io/2013/12/15/human-mind-and-software-engineering/">人类理解的复杂度</a>，记住"组合优于继承"。</li>
<li>测试覆盖率，代码坏味道自动发现，scrum开发模式等都不能保证软件项目的质量，唯一可以保证的就是深刻地结合业务与技术，在你的业务里用你的技术再去深层次地抽象出另一个"MVC"模块化的框架结构。</li>
<li>重构的前提是不改变软件的行为，而混乱的代码经由重构后，它的内部结构已经不是之前那个范式了。</li>
<li>当你需要对项目进行重构时，那就说明该项目以前存在某种技术或人员等上的问题。</li>
<li>代码没有被结构化和注释，不是项目时间因素，而是个人水平能力的体现，因为代码结构和注释体现了思考。</li>
<li>BUG如果是功能，那就不能修复了，而是要花更多的时间去分析和开发。</li>
<li>除非是为了表达视觉结构，否则不推荐重复代码。我对单行代码有偏爱，比如 <code>def teacher?; self.user_type == 'teacher'; end</code> 。</li>
<li>类似不要在GUI里放入逻辑等，都是模块化的体现。但是很多初级程序员不知道这一点，良好的程序员会注意这一点，而优秀的程序员已经在实践之。</li>
<li>逻辑只是用来证明直观，正是范式的体现。</li>
<li>类似重构原则只是事后补救时说服别人用的，它无益于提升你的编码能力，就像很多人做的和以为的设计模式只是在你有几年工作经验后才会去整理自己知识经验体系用的而已，否则会很难以理解这些设计模式。</li>
<li>重构中会有造成自己方被动和被误解的情况，因为甲方看到的和关心的只是是软件的表面行为而已，请慎重沟通。</li>
<li>正如《重构》第359页提到的，它的进度应该是，今天一点点，明天一点点。不是一次性全部重构(那就是重写了)，而是每次重构一点点，不断的抽取模块，按当时的业务需求和BUG来，当然其中也可能有依赖，去重构牵扯的功能模块。</li>
<li>关于管理软件的复杂度和理解力的原则和思想方面可以参考我写的另一篇 <a href="http://mvj3.github.io/2013/12/15/human-mind-and-software-engineering/">人类思维和软件工程学</a> 。</li>
</ul>


<h2>为什么我能做到以上重构</h2>

<p>其实如果没有四五年的工作经验，没有上半年把 <a href="http://mvj3.github.io/2013/08/04/a-man-github/">一个单页应用在线学习应用完全模块化</a> 的思考和经验，我可能还只是停留在 <code>Fat model, skinny controller</code> 和 翻起Martin Fowler的《重构》手册指导的那种层次而已。</p>

<h2>其他教育项目的重构</h2>

<p>Rails社区的一个牛人 @yedingding 在今年2013三月也分享了一篇公益项目Re-education做 <a href="http://yedingding.com/2013/03/04/steps-to-refactor-controller-and-models-in-rails-projects.html">重构</a> 的案例。对于一般规模的Rails项目，[Skinny Controller, Fat Model] 差不多能解决大部分问题了，其次通过适当的Concern(Shared Mixin Module)机制抽取公用部分，再以Delegation Pattern, Service, Presenter，DCI等在MVC不同层面去抽象种种业务逻辑结构。</p>

<h2>关于MongoDB动态字段的吐槽</h2>

<p>MongoDB的动态字段被很多人误用为根据业务变动可以随意动态调整了，其实它的最佳场景是类似新鲜事的非结构化数据及其大数据分片，因为它是为 <strong>单collection</strong> 里读写 <strong>单个记录的整体</strong> 而优化设计的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个人的"github"]]></title>
    <link href="http://mvj3.github.io/2013/08/04/a-man-github/"/>
    <updated>2013-08-04T09:20:00+08:00</updated>
    <id>http://mvj3.github.io/2013/08/04/a-man-github</id>
    <content type="html"><![CDATA[<p>Github不是一个人做的，三个核心创始人在创业时都是写代码的，其中两个人作为程序员也十分有名，是不少有名开源项目的作者。对比这个星球上其他伟大的IT公司，Github网站的代码是能开源就尽量开源的，包括操作Git的grit，用作消息队列的resque，等。Github自然不是我做的，但作为一个自诩有好品味的程序员，我在努力向Github学习和实践它的精神和有益的工作方式，我要构建一个自己的"github"，在此也感谢我所处的公司 eoe 能给我自己去选择技术架构和工作进度这样相对灵活的工作方式的机会。</p>

<h2>缘起</h2>

<p>今年上半年我的主要工作内容是负责一个专注在线学习编程的单页面应用网站的技术部分。从缘起来说，eoe本身主要是做以Android为主的移动开发者服务的，应用市场，移动应用SDK统计，开发者大会活动等都有涉猎，正式的尝试进入IT培训从去年2012年中就开始了（当然想法会更早些）。</p>

<p>当时CEO @靳岩 让我调研公司进入类似 codecademy.com 在线编程领域方案的可能性，这对于当时刚做完<a href="http://mvj3.github.io/2012/11/01/android_eoemarket_data_collect_and_analysis_system_summary">优亿市场应用海量下载统计分析</a> 的算法与数据挖掘工程师无疑是一个很刺激的技术点。codecademy, codeschool 等这些国外在线编程网站毫无意外的展示了他们的创新性，codecademy 既支持JavaScript, HTML, CSS这些浏览器本身就提供编程环境的技术，也提供相对初级的Ruby, Python等后端语言在浏览器的模拟实现，他们用的相关技术包括用LLVM把代码编译成JavaScript执行的编译器Emscripten。codeschool里有个 <a href="http://code.eoe.cn/67">很有意思的地方</a> 就是，它支持在浏览器里按照他们的规则去用Objective-C写iOS程序，编译是在服务器进行的，并通过base64编码不断传回截图，然后模拟成仿佛浏览器真的成了完美的IDE一样，包括编译信息和出错栈。 对于我们要实现在浏览器里用Java编写Android程序，一般方案是采用传送到服务器编译执行，但是这样涉及到复杂的沙盒模型，且对服务器端资源消耗过大。我知道有一家真的实现了，他们前端用的是flash技术，但是这个只能针对简单快速编译的项目，而且我觉得这个脱离了要教会对方学习的本质，因为以后的实际演练肯定是在Eclipse等IDE里进行的，而你的浏览器在现有技术情况下肯定无法全部模拟。后来我也想到了可以以IDE插件的形式解决把线下教学搬到线上的基本构思，技术难度降低一半，这是后话。在教学中三环节 <code>教问练</code> 中，真正把教和练做好的公司大概就这几家了，问的话去是程序员都上的stackoverflow等网站就好了。</p>

<p>去年下半年做了偏前端的 <a href="http://skill.eoe.cn">技能测评</a>，和偏后端的 <a href="http://code.eoe.cn">gist.github.com 克隆网站</a> 。前者算基本没用过，后者不温不火，这让我明白了一个道理，如果我仅仅沉迷于技术实现，自己却无法分身去从事数种自己不熟悉或不太愿意实际执行的工作，那么它的命运就完全取决于组织的决定，因为一个真实产品的成长它需要不同职责的人的参与。前段时间听 @teahour 的一期 <a href="http://teahour.fm/2013/07/15/lean-startup-with-knewone.html">和knewone的李路聊聊技术和精益创业</a> 也聊到类似的情况，很有共鸣。</p>

<p>而公司在这半年也陆续做了些小规模的Android培训。今年2013春节后，正式开启线上教育项目，产品设计由 @iceskysl 主导和驱动，我开始做聊天技术的预演，内容运营部门则调动内外部资源继续制作教程内容。</p>

<h2>研发</h2>

<p>单页面学习应用 learn.eoe.cn 和 报名支付宣传 xuexie.eoe.cn 及后台管理的整体开发上线共历时大概三四个月，我负责的是 learn.eoe.cn（一位前端同事负责写CSS），其他的都是php项目组负责实施。</p>

<p>当 @iceskysl 设计好产品基本原型后，确认学习过程中为单页面应用，因为里面的聊天，问答，考试等的一些操作应该是尽量避免重载页面的。我自告奋勇去设计了学习系统的数据库设计，基本思想上按模块做命名空间切分，课程大纲设计为一个课程包含多个课时，一个课时包含多个小节，小节可以为视频，资料，测评等多种类型，这是内容部分。对应的学生数据则是一个学习数据表绑定一个课程，并关联观看视频监控记录，考试记录，和计时等。这期间，项目组内关于数据结构，或者说课程具体的产品设计需求，经过多次讨论，终于达成思路上的一致。</p>

<p>以下是现在上线后测试服务器里学习页面的多个模块的截图。
<img src="/images/one-man-github/learn_video.png" alt="learn_video" />
<img src="/images/one-man-github/learn_qa.png" alt="learn_qa" />
<img src="/images/one-man-github/learn_exam.png" alt="learn_exam" /></p>

<p>我对架构设计的原则是技术模块化，业务流程化，两者互相解耦。</p>

<h3>业务流程化</h3>

<p>对于一个学生来说，TA面对的主体是课程和TA的学习数据，其他都是依附于其之上。</p>

<p>对于内容管理人员来说，课程是标准的层级关联，视频和其他也只是依附于其之上。</p>

<p>对于我作为学习页面的技术负责人来说，用户是否付款和加入某个班级只是一个是非状态。用户的学习状态依赖于业务需求，可能需要结合多个数据源做操作判断，比如是否可以测评要保证你起码观看过教学视频及教学资料，是否学习完成也依赖于你对该课程所有课时的学习状态。</p>

<h3>技术模块化</h3>

<p>想清楚好以上清晰的业务流程骨架后，我开始本人4年技术生涯里最彻底的模块拆解，并开源出十多个模块。</p>

<p><strong>跨子域名用户登陆</strong>，用的是PHP写的单点登陆解决方案UCenter，我整理了 @iceskysl 从PHP改写的Ruby代码，并<a href="https://github.com/eoecn/ucenter_authcode">开源</a>出来。在应用时，有次遇到误把对方一个每次都变的cookies作为这边的唯一身份认证，这个在单域名操作体现不出来，而访问多个子域名后这边session就失效了。</p>

<p><strong>视频播放</strong>用的 <a href="http://www.videojs.com">VIDEO.JS</a> 框架，不需要太多配置代码。另外我想了个开源的<a href="https://github.com/eoecn/videojs_user_track">视频监控的方案</a>，就是把用户对不同时间段的观看频次对应的以秒为单位的数组里，播放一次是1, 最大是9，以此观察视频具体效果，和单个学生的学习疑点。从最近遇到的一个BUG来看，浏览器缓存了视频，但是网络是随时可断的，导致某些网络不太稳定的用户的监控数据可能是部分缺失的。所以监控数据还是得与业务逻辑彻底分开的，前者只应该作为业务判断参考之一。（有人可能会提到放在cookie里，但是其最大长度是4K，那么一个小时的视频 <code>1*2*3600=7200</code> 就放不下了）。</p>

<p><strong>参考资料</strong>用的是markdown编辑和渲染，我抽取了ruby-china的markdown渲染代码，并 <a href="https://github.com/eoecn/markdown-ruby-china">自动识别程序语言，文件名，别名等多种格式</a>。</p>

<p><strong>问答讨论</strong>是个太标准的CRUD应用，一个论坛无非是主题和回复，里面显示的用户名和头像其实都是可以在前端用JavaScript去组装的， <a href="http://mvj3.github.io/2013/05/28/fix-backbones-view-duplicated-events-bind/">用Backbones这个Javascript MVC框架实现模版和事件绑定</a>  ，添加完数据表后，直接用一个Rails Helper配置下即可，我把它取名为 <a href="https://github.com/eoecn/qa-rails">qa-rails</a> 。</p>

<p><strong>测评</strong>是个相对独立的业务，鉴于去年做过差不多的，这次实现更加精炼了些，JavaScript 239行，HAML两个模版60行。这块限于业务特殊无法作到开源。</p>

<p><strong>班级讨论</strong>是基于 <a href="https://github.com/faye/faye">Faye消息订阅发布系统</a> 做的，并实现了 <a href="https://github.com/eoecn/faye-online">在线用户显示和计时</a>，原理是绑定了Faye提供用户登入和登出的事件接口。 这里要特别感谢我们的一个女产品(条理清晰的黑盒测试)，是她用心的测试出了有这个用户的电脑非正常关闭浏览器造成服务器端一直在计时的错误。Faye 检测用户退出有两种方法，一种是服务器端的EventMachine定期检测client是否失去连接；另一种是客户端在浏览器关闭前发送disconnect请求(对应的配置选项是autodisconnect)，如果正常关闭那是ok的，但是如果用户取消关闭，那么这个faye client就死掉了，也就无法聊天，更新在线用户和计时。然后我想到了一种方案是，就是关闭autodisconnect，把这个事件改为发送让服务器三秒后才去检测这个client是否继续存活的请求，这样无论浏览器是否关掉，服务器 都照样主动检测。聊天室的弊端在于它的特点是需要中央服务器，无法支持过大的聊天室，这里暗示的一个信息是系统架构是可以按聊天室拆分做负载均衡的。</p>

<p>上面说的大部分都是从前端角度分析的，现在来说说后端。</p>

<p>随着项目不断迭代，我发现几乎大部分操作都直接绑定到用户学习状态表 LearnIssue 了，关联的课时和学习状态，每门课时对应的视频观看数据和考试信息都是代理过去，这样逻辑相对还是很清晰的。</p>

<p>在写单页面应用时，虽然像问答和聊天都独立出去用JavaScript载入了，但是还是需要同时载入几十个变量。<a href="http://ruby-china.org/topics/12477">一般人都会反应为什么不整合到Model里去呢</a> ，原因是我还把十多个数据合法验证加入到Controller里去了，这里包括后台人员录入的数据不规范和用户访问权限等，出错方式是给出带参数说明的 <code>redirect_to</code> URL ，比如 <code>?reason=course_invalid</code> ，这样后台可以随时调整并在前端验证。在调整业务的时候，我经常要去调整变量位置，所以就写了类似rake步骤依赖的 <a href="http://github.com/eoecn/stepstepstep">stepstepstep.gem</a> 去生成自动排序执行的14个before_filters，里面涉及一个图论算法。</p>

<p>这个项目一个很大的特色之一是对JSON的运用，比如学习状态，课程信息等。大部分是直接用 <a href="https://github.com/bdurand/json_record/">json_record</a> 配置的，效果等同于MongoDB文档存储（当然副作用是不能直接用SQL做字段本身的操作了），但是运维只需面对MySQL即可。我把项目设计成基本都是单表操作，现在一个学习页面的载入包含着近50条SQL查询，而响应时间却都还在300ms左右。</p>

<p>最后为了给大家一个相对直观的项目复杂度的理解，我运行 <code>bundle exec rake stats</code> 对Ruby源码情况做了简单统计，并对比由牛人 @huacnlee 主导开发的 Ruby China专业社区论坛。</p>

<p>```text
learn.eoe.cn
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+
| Name                 | Lines |   LOC | Classes | Methods | M/C | LOC/M |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+
| Controllers          |   558 |   356 |       9 |      24 |   2 |    12 |
| Helpers              |    26 |    19 |       0 |       4 |   0 |     2 |
| Models               |   690 |   529 |      17 |      54 |   3 |     7 |
| Libraries            |   114 |    86 |       1 |       2 |   2 |    41 |
| Integration tests    |     0 |     0 |       0 |       0 |   0 |     0 |
| Functional tests     |    11 |     6 |       2 |       0 |   0 |     0 |
| Unit tests           |     8 |     6 |       2 |       0 |   0 |     0 |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+
| Total                |  1407 |  1002 |      31 |      84 |   2 |     9 |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+
  Code LOC: 990     Test LOC: 12     Code to Test Ratio: 1:0.0</p>

<p>ruby-china
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+
| Name                 | Lines |   LOC | Classes | Methods | M/C | LOC/M |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+
| Controllers          |  1587 |  1251 |      32 |     182 |   5 |     4 |
| Helpers              |   365 |   301 |       0 |      41 |   0 |     5 |
| Models               |  1542 |  1166 |      24 |     106 |   4 |     9 |
| Mailers              |    18 |    15 |       2 |       1 |   0 |    13 |
| Javascripts          |  6908 |  5006 |       1 |     546 | 546 |     7 |
| Libraries            |   552 |   411 |       6 |      41 |   6 |     8 |
| Api specs            |   171 |   148 |       0 |       2 |   0 |    72 |
| Cell specs           |   127 |   106 |       0 |       0 |   0 |     0 |
| Controller specs     |   678 |   572 |       0 |       0 |   0 |     0 |
| Helper specs         |   364 |   290 |       0 |       0 |   0 |     0 |
| Lib specs            |   229 |   173 |       0 |       0 |   0 |     0 |
| Model specs          |  1034 |   859 |       3 |       0 |   0 |     0 |
| Request specs        |    40 |    33 |       0 |       0 |   0 |     0 |
| Routing specs        |    58 |    43 |       0 |       0 |   0 |     0 |
| View specs           |    34 |    26 |       0 |       0 |   0 |     0 |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+
| Total                | 13707 | 10400 |      68 |     919 |  13 |     9 |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+
  Code LOC: 8150     Test LOC: 2250     Code to Test Ratio: 1:0.3
```</p>

<p>假设代码质量和风格差不多的话，从代码量来说 learn.eoe.cn 主体Ruby部分的复杂度是 ruby-china.org 的三分之一 （从Models和Controllers占比来说也是差不多的），对于一个单页应用来说这差不多了。唯一的区别是learn.eoe.cn的控制器方法行数比ruby-china.org大三倍，这和业务逻辑更加复杂有关。（Ruby China得排除基本都是外部静态js的这6908行统计数据。）</p>

<p>另外上午我写了一段Ruby脚本来统计 <a href="https://gist.github.com/mvj3/6149713">learn.eoe.cn Rails项目及其开源项目源码行数</a> ，结果为：
```text
[rails_engine_eoe]  Ruby:884 | JavaScript:15 | HAML:0
[ucenter_authcode]  Ruby:78 | JavaScript:0 | HAML:0
[rack_image_assets_cache_control]  Ruby:28 | JavaScript:0 | HAML:0
[faye-online]  Ruby:678 | JavaScript:52 | HAML:0
[qa-rails]  Ruby:259 | JavaScript:280 | HAML:183
[videojs_user_track]  Ruby:140 | JavaScript:84 | HAML:0
[stepstepstep]  Ruby:271 | JavaScript:0 | HAML:0
[cross_time_calculation]  Ruby:143 | JavaScript:0 | HAML:0
[/Users/mvj3/eoemobile/code/learn]  Ruby:4113 | JavaScript:1108 | HAML:517</p>

<p>[total] Ruby:6721 | JavaScript:1539 | HAML:700
<code>``
可以看到Ruby和JavaScript有三分之一左右是开源的，Ruby更多些。另外一个数据是git提交日志, </code>1,347 commits / 21,477 ++ / 12,354 &mdash;` 。</p>

<p>这项目最大的遗憾就是没有测试，和互联网创业产品风格及资源配备等都很有关系，不过抽取的外部库比较重要或重逻辑的地方都写了必要的测试了。</p>

<p>注明: 本文仅代表个人观点，与实际所涉公司无关。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How do i create stepstepstep gem]]></title>
    <link href="http://mvj3.github.io/2013/07/13/how-do-i-create-stepstepstep-gem/"/>
    <updated>2013-07-13T16:41:00+08:00</updated>
    <id>http://mvj3.github.io/2013/07/13/how-do-i-create-stepstepstep-gem</id>
    <content type="html"><![CDATA[<p>A few months ago, I was writing a single page application about learning mobile development technology at <a href="http://learn.eoe.cn.">http://learn.eoe.cn.</a> This page contains lessons, a video, classes, teachers, students, reference material, question-to-answers, exams, chat messages, and their current all learning statuses and dependencies. In brief, there are fifteen steps to load this page, including privileges to judge, fourteen illegal <code>redirect_to</code> , etc. So I need to write a step dependencies management tool, like rake tasks.</p>

<p>At first, I thought maybe I could define several <code>proc</code>s in a single before_filter, but the execution context is really complicated. Then one day, I found action_jackson.gem, which was written by <a href="https://github.com/blakefrost/action_jackson">Blake Taylor</a> two years ago. The core implementation of this gem is to define each action as a method, and at last call a class method <code>register_filters</code> to register all these methods as <code>before_filter</code> independently. Of course, they&rsquo;re ordered by the earlier declarations. This implementation is not elegant, but the idea is really awesome, it doesn&rsquo;t break Rails&rsquo;s rules.</p>

<p>Then I got a deep understanding of the Rails controllers filters&rsquo;s implementation mechanism. Maybe <code>skip_before_filter</code> helped. In each <code>step</code>, I insert it first, extract all the inserted steps by <code>skip_before_filter</code>, then sort them by TSort(a topological sorting algorithm provided by Ruby standard library), and at last append them again to before_filters. It works, and all rspecs are passed.</p>

<p>I renamed it from action_jackson to stepstepstep, because the DSL is only a <code>step</code> class method, which handles all the details. Most of the implementations were rewritten, and I added rspecs . Thanks Blake Taylor :)</p>

<p>The project homepage is <a href="http://github.com/eoecn/stepstepstep">http://github.com/eoecn/stepstepstep</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails常见配置问题]]></title>
    <link href="http://mvj3.github.io/2013/03/06/rails-general-configuration-problems/"/>
    <updated>2013-03-06T10:42:41+08:00</updated>
    <id>http://mvj3.github.io/2013/03/06/rails-general-configuration-problems</id>
    <content type="html"><![CDATA[<h2>提示已经安装的gem不在Gemfile里</h2>

<p>最近有时遇到明明已经安装了rake，但是却提示我说有些gem没有在Gemfile里引用。比如：
Could not find rake-0.9.2.2 in any of the sources
Run &lsquo;bundle install&rsquo; to install missing gems.</p>

<p>我所使用的Ruby版本管理环境是rvm，查看下rvm info，发现ruby路径和gem管理路径不一致，因此rvm reload一下就解决了该问题。</p>

<p>rvm不一致的问题还需要查下，推测可能是开启多个SHELL，导致设置不一致～</p>

<h2>assets没有编译</h2>

<p>需要显示指定路径，在config/environments/production.rb里加入
<code>ruby
config.assets.precompile += %w[*js *css]
</code></p>

<h2>development模式下刷新后静态资源不变</h2>

<p>删除public/assets目录下的缓存文件，这样就走动态请求了。</p>

<h2>修复rvm info里ruby版本不一致bug</h2>

<p>在/etc/profile里加一行rvm reload</p>

<h2>修复gem,irb等命令里老是提示ree某个版本的environment不存在</h2>

<p>修改该命令里的ruby环境路径到自己指定的版本</p>

<h2>修复默写外部css引用图片等静态资源不以/assets开头</h2>

<p>把资源及其路径直接拷到/public目录下</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord兼容非正规数据库表名和表字段设计的多对多，一对多关系]]></title>
    <link href="http://mvj3.github.io/2013/01/24/define-many-to-many-and-one-to-many-associations-for-informal-database-table-and-field-design-in-activerecord/"/>
    <updated>2013-01-24T16:07:41+08:00</updated>
    <id>http://mvj3.github.io/2013/01/24/define-many-to-many-and-one-to-many-associations-for-informal-database-table-and-field-design-in-activerecord</id>
    <content type="html"><![CDATA[<p>Rails里的多对多关系声明极其简单，一句 <code>has_and_belongs_to_many :projects</code> 就可表示当前表通过一个中间表来拥有多个projects，唯一的约定就是复数的表名和_id后缀的外键。</p>

<p>但是如果你接手的数据库是在别的不同约定的语言框架里设计的，这样去套用Rails的 <code>has_and_belongs_to_many</code> 就炕爹了，你得一个一个去声明每一个选项，以下就是本人惨痛的经历，其他人看了就不用重蹈覆辙了。</p>

<p>参考：<a href="http://guides.rubyonrails.org/association_basics.html">http://guides.rubyonrails.org/association_basics.html</a> ，和本地的Rails rdoc文档</p>

<p>需求是查出一个用户收藏的所有代码。</p>

<p> 先来看下表结构。用户，收藏，代码三个表结构主要部分如下：
<code>``sql
CREATE TABLE</code>common_member<code>(
 </code>uid<code>mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (</code>uid`),
) ENGINE=MyISAM AUTO_INCREMENT=802058 DEFAULT CHARSET=utf8;</p>

<p>CREATE TABLE <code>common_user_favorite</code> (
  <code>itemid</code> int(11) NOT NULL,
  <code>uid</code> int(11) NOT NULL,
  <code>model</code> enum(&lsquo;blog&rsquo;,&lsquo;code&rsquo;,&lsquo;news&rsquo;,&lsquo;book&rsquo;) NOT NULL,
  <code>create_time</code> int(11) NOT NULL,
  <code>is_delete</code> tinyint(1) NOT NULL DEFAULT &lsquo;0&rsquo;
) ENGINE=InnoDB DEFAULT CHARSET=utf8;</p>

<p>CREATE TABLE <code>code_gists</code> (
  <code>id</code> int(11) NOT NULL AUTO_INCREMENT,
  <code>user_id</code> int(11) DEFAULT NULL,
  <code>created_at</code> datetime NOT NULL,
  <code>updated_at</code> datetime NOT NULL,
  <code>deleted_at</code> tinyint(1) DEFAULT NULL,
  PRIMARY KEY (<code>id</code>),
  KEY <code>index_code_gists_on_deleted_at_and_user_id_and_updated_at</code> (<code>deleted_at</code>,<code>user_id</code>,<code>updated_at</code>)
) ENGINE=InnoDB AUTO_INCREMENT=149 DEFAULT CHARSET=utf8;
```</p>

<p>我们接下来的代码逻辑就是查找出目标用户，通过收藏表，来找出该用户的所有代码。</p>

<p>先声明三个model如下：
<code>ruby
class CommonMember &lt; ActiveRecord::Base
  self.table_name = :common_member
end
class CommonUserFavorite &lt; ActiveRecord::Base
  self.table_name = :common_user_favorite
end
class CodeGist &lt; ActiveRecord::Base
end
</code></p>

<p>接着声明三个model之间的关系
<code>ruby
CommonUserFavoriteConditions = "`common_user_favorite`.`is_delete` = 0 AND `common_user_favorite`.`model` = 'code'"
class CommonMember &lt; ActiveRecord::Base
  has_many :fav_gists, :through =&gt; :favs, :order =&gt; "`common_user_favorite`.`create_time` DESC", :source =&gt; :gist
  has_many :favs, :class_name =&gt; CommonUserFavorite, :foreign_key =&gt; :uid, :conditions =&gt; CommonUserFavoriteConditions
end
class CommonUserFavorite &lt; ActiveRecord::Base
  belongs_to :gist, :class_name =&gt; CodeGist, :foreign_key =&gt; :itemid
end
class CodeGist &lt; ActiveRecord::Base
  has_many :favs, :class_name =&gt; CommonUserFavorite, :foreign_key =&gt; :itemid, :conditions =&gt; CommonUserFavoriteConditions
end
</code></p>

<p>以下是解释</p>

<p>先声明收藏表(CommonUserFavorite) <code>belongs_to</code> 代码表(CodeGist)，指定 收藏表(CommonUserFavorite)  的外键是:itemid，关联的代码表(CodeGist)的主键是:id。示例如：
<code>CommonUserFavorite.where(:model =&gt; 'code').first.gist</code>
<code>``sql
SELECT</code>common_user_favorite`.*</p>

<pre><code>    FROM `common_user_favorite`
    WHERE `common_user_favorite`.`model` = 'code'
    LIMIT 1;
</code></pre>

<p>SELECT <code>code_gists</code>.*</p>

<pre><code>    FROM `code_gists`
    WHERE `code_gists`.`id` = 43 AND (`code_gists`.`deleted_at` IS NULL)
    LIMIT 1;
</code></pre>

<p>```</p>

<p>再声明代码表(CodeGist) <code>has_many</code> 收藏表(CommonUserFavorite) ，指定 收藏表(CommonUserFavorite)  的外键是 :itemid，且查询条件是 <code>:conditions =&gt; ["common_user_favorite.model = 'code'"]</code> 。示例如： <code>CodeGist.last.favs</code>
<code>``sql
SELECT</code>code_gists`.*</p>

<pre><code>    FROM `code_gists`
    WHERE (`code_gists`.`deleted_at` IS NULL)
    ORDER BY `code_gists`.`id` DESC
    LIMIT 1;
</code></pre>

<p>SELECT <code>common_user_favorite</code>.*</p>

<pre><code>    FROM `common_user_favorite`
    WHERE `common_user_favorite`.`itemid` = 107
            AND (`common_user_favorite`.`is_delete` = 0
            AND `common_user_favorite`.`model` = 'code');
</code></pre>

<p>```</p>

<p>最后声明是用户表(CommonMember)对代码表(CodeGist)的has_many 是通过 用户表(CommonMember)对收藏表(CommonUserFavorite)的has_many 和 收藏表(CommonUserFavorite)对代码表(CodeGist)的belongs_to 共同实现的，这两个声明关系分别表述为  <code>:through =&gt; :favs</code> 和  <code>:source =&gt; :gist</code>。各自的示例如：</p>

<p><code>cm = CommonMember.where(:uid =&gt; 470700).first</code>
<code>``sql
SELECT</code>common_member`.*</p>

<pre><code>    FROM `common_member`
    WHERE `common_member`.`uid` = 470700
    LIMIT 1;
</code></pre>

<p>```</p>

<p><code>cm.fav_gists</code>
<code>``sql
SELECT</code>code_gists`.*</p>

<pre><code>    FROM `code_gists`
    INNER JOIN `common_user_favorite`
          ON `code_gists`.`id` = `common_user_favorite`.`itemid`
    WHERE `common_user_favorite`.`uid` = 470700
          AND (`code_gists`.`deleted_at` IS NULL)
          AND (`common_user_favorite`.`is_delete` = 0
          AND `common_user_favorite`.`model` = 'code')
    ORDER BY `common_user_favorite`.`create_time` DESC;
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
