<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | 世界的审美！]]></title>
  <link href="http://mvj3.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://mvj3.github.io/"/>
  <updated>2013-12-18T15:54:03+08:00</updated>
  <id>http://mvj3.github.io/</id>
  <author>
    <name><![CDATA[mvj3]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一个人的"github"]]></title>
    <link href="http://mvj3.github.io/2013/08/04/a-man-github/"/>
    <updated>2013-08-04T09:20:00+08:00</updated>
    <id>http://mvj3.github.io/2013/08/04/a-man-github</id>
    <content type="html"><![CDATA[<p>Github不是一个人做的，三个核心创始人在创业时都是写代码的，其中两个人作为程序员也十分有名，是不少有名开源项目的作者。对比这个星球上其他伟大的IT公司，Github网站的代码是能开源就尽量开源的，包括操作Git的grit，用作消息队列的resque，等。Github自然不是我做的，但作为一个自诩有好品味的程序员，我在努力向Github学习和实践它的精神和有益的工作方式，我要构建一个自己的"github"，在此也感谢我所处的公司 eoe 能给我自己去选择技术架构和工作进度这样相对灵活的工作方式的机会。</p>

<h2>缘起</h2>

<p>今年上半年我的主要工作内容是负责一个专注在线学习编程的单页面应用网站的技术部分。从缘起来说，eoe本身主要是做以Android为主的移动开发者服务的，应用市场，移动应用SDK统计，开发者大会活动等都有涉猎，正式的尝试进入IT培训从去年2012年中就开始了（当然想法会更早些）。</p>

<p>当时CEO @靳岩 让我调研公司进入类似 codecademy.com 在线编程领域方案的可能性，这对于当时刚做完<a href="http://mvj3.github.io/2012/11/01/android_eoemarket_data_collect_and_analysis_system_summary">优亿市场应用海量下载统计分析</a> 的算法与数据挖掘工程师无疑是一个很刺激的技术点。codecademy, codeschool 等这些国外在线编程网站毫无意外的展示了他们的创新性，codecademy 既支持JavaScript, HTML, CSS这些浏览器本身就提供编程环境的技术，也提供相对初级的Ruby, Python等后端语言在浏览器的模拟实现，他们用的相关技术包括用LLVM把代码编译成JavaScript执行的编译器Emscripten。codeschool里有个 <a href="http://code.eoe.cn/67">很有意思的地方</a> 就是，它支持在浏览器里按照他们的规则去用Objective-C写iOS程序，编译是在服务器进行的，并通过base64编码不断传回截图，然后模拟成仿佛浏览器真的成了完美的IDE一样，包括编译信息和出错栈。 对于我们要实现在浏览器里用Java编写Android程序，一般方案是采用传送到服务器编译执行，但是这样涉及到复杂的沙盒模型，且对服务器端资源消耗过大。我知道有一家真的实现了，他们前端用的是flash技术，但是这个只能针对简单快速编译的项目，而且我觉得这个脱离了要教会对方学习的本质，因为以后的实际演练肯定是在Eclipse等IDE里进行的，而你的浏览器在现有技术情况下肯定无法全部模拟。后来我也想到了可以以IDE插件的形式解决把线下教学搬到线上的基本构思，技术难度降低一半，这是后话。在教学中三环节 <code>教问练</code> 中，真正把教和练做好的公司大概就这几家了，问的话去是程序员都上的stackoverflow等网站就好了。</p>

<p>去年下半年做了偏前端的 <a href="http://skill.eoe.cn">技能测评</a>，和偏后端的 <a href="http://code.eoe.cn">gist.github.com 克隆网站</a> 。前者算基本没用过，后者不温不火，这让我明白了一个道理，如果我仅仅沉迷于技术实现，自己却无法分身去从事数种自己不熟悉或不太愿意实际执行的工作，那么它的命运就完全取决于组织的决定，因为一个真实产品的成长它需要不同职责的人的参与。前段时间听 @teahour 的一期 <a href="http://teahour.fm/2013/07/15/lean-startup-with-knewone.html">和knewone的李路聊聊技术和精益创业</a> 也聊到类似的情况，很有共鸣。</p>

<p>而公司在这半年也陆续做了些小规模的Android培训。今年2013春节后，正式开启线上教育项目，产品设计由 @iceskysl 主导和驱动，我开始做聊天技术的预演，内容运营部门则调动内外部资源继续制作教程内容。</p>

<h2>研发</h2>

<p>单页面学习应用 learn.eoe.cn 和 报名支付宣传 xuexie.eoe.cn 及后台管理的整体开发上线共历时大概三四个月，我负责的是 learn.eoe.cn（一位前端同事负责写CSS），其他的都是php项目组负责实施。</p>

<p>当 @iceskysl 设计好产品基本原型后，确认学习过程中为单页面应用，因为里面的聊天，问答，考试等的一些操作应该是尽量避免重载页面的。我自告奋勇去设计了学习系统的数据库设计，基本思想上按模块做命名空间切分，课程大纲设计为一个课程包含多个课时，一个课时包含多个小节，小节可以为视频，资料，测评等多种类型，这是内容部分。对应的学生数据则是一个学习数据表绑定一个课程，并关联观看视频监控记录，考试记录，和计时等。这期间，项目组内关于数据结构，或者说课程具体的产品设计需求，经过多次讨论，终于达成思路上的一致。</p>

<p>以下是现在上线后测试服务器里学习页面的多个模块的截图。
<img src="/images/one-man-github/learn_video.png" alt="learn_video" />
<img src="/images/one-man-github/learn_qa.png" alt="learn_qa" />
<img src="/images/one-man-github/learn_exam.png" alt="learn_exam" /></p>

<p>我对架构设计的原则是技术模块化，业务流程化，两者互相解耦。</p>

<h3>业务流程化</h3>

<p>对于一个学生来说，TA面对的主体是课程和TA的学习数据，其他都是依附于其之上。</p>

<p>对于内容管理人员来说，课程是标准的层级关联，视频和其他也只是依附于其之上。</p>

<p>对于我作为学习页面的技术负责人来说，用户是否付款和加入某个班级只是一个是非状态。用户的学习状态依赖于业务需求，可能需要结合多个数据源做操作判断，比如是否可以测评要保证你起码观看过教学视频及教学资料，是否学习完成也依赖于你对该课程所有课时的学习状态。</p>

<h3>技术模块化</h3>

<p>想清楚好以上清晰的业务流程骨架后，我开始本人4年技术生涯里最彻底的模块拆解，并开源出十多个模块。</p>

<p><strong>跨子域名用户登陆</strong>，用的是PHP写的单点登陆解决方案UCenter，我整理了 @iceskysl 从PHP改写的Ruby代码，并<a href="https://github.com/eoecn/ucenter_authcode">开源</a>出来。在应用时，有次遇到误把对方一个每次都变的cookies作为这边的唯一身份认证，这个在单域名操作体现不出来，而访问多个子域名后这边session就失效了。</p>

<p><strong>视频播放</strong>用的 <a href="http://www.videojs.com">VIDEO.JS</a> 框架，不需要太多配置代码。另外我想了个开源的<a href="https://github.com/eoecn/videojs_user_track">视频监控的方案</a>，就是把用户对不同时间段的观看频次对应的以秒为单位的数组里，播放一次是1, 最大是9，以此观察视频具体效果，和单个学生的学习疑点。从最近遇到的一个BUG来看，浏览器缓存了视频，但是网络是随时可断的，导致某些网络不太稳定的用户的监控数据可能是部分缺失的。所以监控数据还是得与业务逻辑彻底分开的，前者只应该作为业务判断参考之一。（有人可能会提到放在cookie里，但是其最大长度是4K，那么一个小时的视频 <code>1*2*3600=7200</code> 就放不下了）。</p>

<p><strong>参考资料</strong>用的是markdown编辑和渲染，我抽取了ruby-china的markdown渲染代码，并 <a href="https://github.com/eoecn/markdown-ruby-china">自动识别程序语言，文件名，别名等多种格式</a>。</p>

<p><strong>问答讨论</strong>是个太标准的CRUD应用，一个论坛无非是主题和回复，里面显示的用户名和头像其实都是可以在前端用JavaScript去组装的， <a href="http://mvj3.github.io/2013/05/28/fix-backbones-view-duplicated-events-bind/">用Backbones这个Javascript MVC框架实现模版和事件绑定</a>  ，添加完数据表后，直接用一个Rails Helper配置下即可，我把它取名为 <a href="https://github.com/eoecn/qa-rails">qa-rails</a> 。</p>

<p><strong>测评</strong>是个相对独立的业务，鉴于去年做过差不多的，这次实现更加精炼了些，JavaScript 239行，HAML两个模版60行。这块限于业务特殊无法作到开源。</p>

<p><strong>班级讨论</strong>是基于 <a href="https://github.com/faye/faye">Faye消息订阅发布系统</a> 做的，并实现了 <a href="https://github.com/eoecn/faye-online">在线用户显示和计时</a>，原理是绑定了Faye提供用户登入和登出的事件接口。 这里要特别感谢我们的一个女产品(条理清晰的黑盒测试)，是她用心的测试出了有这个用户的电脑非正常关闭浏览器造成服务器端一直在计时的错误。Faye 检测用户退出有两种方法，一种是服务器端的EventMachine定期检测client是否失去连接；另一种是客户端在浏览器关闭前发送disconnect请求(对应的配置选项是autodisconnect)，如果正常关闭那是ok的，但是如果用户取消关闭，那么这个faye client就死掉了，也就无法聊天，更新在线用户和计时。然后我想到了一种方案是，就是关闭autodisconnect，把这个事件改为发送让服务器三秒后才去检测这个client是否继续存活的请求，这样无论浏览器是否关掉，服务器 都照样主动检测。聊天室的弊端在于它的特点是需要中央服务器，无法支持过大的聊天室，这里暗示的一个信息是系统架构是可以按聊天室拆分做负载均衡的。</p>

<p>上面说的大部分都是从前端角度分析的，现在来说说后端。</p>

<p>随着项目不断迭代，我发现几乎大部分操作都直接绑定到用户学习状态表 LearnIssue 了，关联的课时和学习状态，每门课时对应的视频观看数据和考试信息都是代理过去，这样逻辑相对还是很清晰的。</p>

<p>在写单页面应用时，虽然像问答和聊天都独立出去用JavaScript载入了，但是还是需要同时载入几十个变量。<a href="http://ruby-china.org/topics/12477">一般人都会反应为什么不整合到Model里去呢</a> ，原因是我还把十多个数据合法验证加入到Controller里去了，这里包括后台人员录入的数据不规范和用户访问权限等，出错方式是给出带参数说明的 <code>redirect_to</code> URL ，比如 <code>?reason=course_invalid</code> ，这样后台可以随时调整并在前端验证。在调整业务的时候，我经常要去调整变量位置，所以就写了类似rake步骤依赖的 <a href="http://github.com/eoecn/stepstepstep">stepstepstep.gem</a> 去生成自动排序执行的14个before_filters，里面涉及一个图论算法。</p>

<p>这个项目一个很大的特色之一是对JSON的运用，比如学习状态，课程信息等。大部分是直接用 <a href="https://github.com/bdurand/json_record/">json_record</a> 配置的，效果等同于MongoDB文档存储（当然副作用是不能直接用SQL做字段本身的操作了），但是运维只需面对MySQL即可。我把项目设计成基本都是单表操作，现在一个学习页面的载入包含着近50条SQL查询，而响应时间却都还在300ms左右。</p>

<p>最后为了给大家一个相对直观的项目复杂度的理解，我运行 <code>bundle exec rake stats</code> 对Ruby源码情况做了简单统计，并对比由牛人 @huacnlee 主导开发的 Ruby China专业社区论坛。</p>

<p>```text
learn.eoe.cn
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+
| Name                 | Lines |   LOC | Classes | Methods | M/C | LOC/M |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+
| Controllers          |   558 |   356 |       9 |      24 |   2 |    12 |
| Helpers              |    26 |    19 |       0 |       4 |   0 |     2 |
| Models               |   690 |   529 |      17 |      54 |   3 |     7 |
| Libraries            |   114 |    86 |       1 |       2 |   2 |    41 |
| Integration tests    |     0 |     0 |       0 |       0 |   0 |     0 |
| Functional tests     |    11 |     6 |       2 |       0 |   0 |     0 |
| Unit tests           |     8 |     6 |       2 |       0 |   0 |     0 |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+
| Total                |  1407 |  1002 |      31 |      84 |   2 |     9 |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+
  Code LOC: 990     Test LOC: 12     Code to Test Ratio: 1:0.0</p>

<p>ruby-china
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+
| Name                 | Lines |   LOC | Classes | Methods | M/C | LOC/M |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+
| Controllers          |  1587 |  1251 |      32 |     182 |   5 |     4 |
| Helpers              |   365 |   301 |       0 |      41 |   0 |     5 |
| Models               |  1542 |  1166 |      24 |     106 |   4 |     9 |
| Mailers              |    18 |    15 |       2 |       1 |   0 |    13 |
| Javascripts          |  6908 |  5006 |       1 |     546 | 546 |     7 |
| Libraries            |   552 |   411 |       6 |      41 |   6 |     8 |
| Api specs            |   171 |   148 |       0 |       2 |   0 |    72 |
| Cell specs           |   127 |   106 |       0 |       0 |   0 |     0 |
| Controller specs     |   678 |   572 |       0 |       0 |   0 |     0 |
| Helper specs         |   364 |   290 |       0 |       0 |   0 |     0 |
| Lib specs            |   229 |   173 |       0 |       0 |   0 |     0 |
| Model specs          |  1034 |   859 |       3 |       0 |   0 |     0 |
| Request specs        |    40 |    33 |       0 |       0 |   0 |     0 |
| Routing specs        |    58 |    43 |       0 |       0 |   0 |     0 |
| View specs           |    34 |    26 |       0 |       0 |   0 |     0 |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+
| Total                | 13707 | 10400 |      68 |     919 |  13 |     9 |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+
  Code LOC: 8150     Test LOC: 2250     Code to Test Ratio: 1:0.3
```</p>

<p>假设代码质量和风格差不多的话，从代码量来说 learn.eoe.cn 主体Ruby部分的复杂度是 ruby-china.org 的三分之一 （从Models和Controllers占比来说也是差不多的），对于一个单页应用来说这差不多了。唯一的区别是learn.eoe.cn的控制器方法行数比ruby-china.org大三倍，这和业务逻辑更加复杂有关。（Ruby China得排除基本都是外部静态js的这6908行统计数据。）</p>

<p>另外上午我写了一段Ruby脚本来统计 <a href="https://gist.github.com/mvj3/6149713">learn.eoe.cn Rails项目及其开源项目源码行数</a> ，结果为：
```text
[rails_engine_eoe]  Ruby:884 | JavaScript:15 | HAML:0
[ucenter_authcode]  Ruby:78 | JavaScript:0 | HAML:0
[rack_image_assets_cache_control]  Ruby:28 | JavaScript:0 | HAML:0
[faye-online]  Ruby:678 | JavaScript:52 | HAML:0
[qa-rails]  Ruby:259 | JavaScript:280 | HAML:183
[videojs_user_track]  Ruby:140 | JavaScript:84 | HAML:0
[stepstepstep]  Ruby:271 | JavaScript:0 | HAML:0
[cross_time_calculation]  Ruby:143 | JavaScript:0 | HAML:0
[/Users/mvj3/eoemobile/code/learn]  Ruby:4113 | JavaScript:1108 | HAML:517</p>

<p>[total] Ruby:6721 | JavaScript:1539 | HAML:700
<code>``
可以看到Ruby和JavaScript有三分之一左右是开源的，Ruby更多些。另外一个数据是git提交日志, </code>1,347 commits / 21,477 ++ / 12,354 &mdash;` 。</p>

<p>这项目最大的遗憾就是没有测试，和互联网创业产品风格及资源配备等都很有关系，不过抽取的外部库比较重要或重逻辑的地方都写了必要的测试了。</p>

<p>注明: 本文仅代表个人观点，与实际所涉公司无关。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How do i create stepstepstep gem]]></title>
    <link href="http://mvj3.github.io/2013/07/13/how-do-i-create-stepstepstep-gem/"/>
    <updated>2013-07-13T16:41:00+08:00</updated>
    <id>http://mvj3.github.io/2013/07/13/how-do-i-create-stepstepstep-gem</id>
    <content type="html"><![CDATA[<p>A few months ago, I was writing a single page application about learning mobile development technology at <a href="http://learn.eoe.cn.">http://learn.eoe.cn.</a> This page contains lessons, a video, classes, teachers, students, reference material, question-to-answers, exams, chat messages, and their current all learning statuses and dependencies. In brief, there are fifteen steps to load this page, including privileges to judge, fourteen illegal <code>redirect_to</code> , etc. So I need to write a step dependencies management tool, like rake tasks.</p>

<p>At first, I thought maybe I could define several <code>proc</code>s in a single before_filter, but the execution context is really complicated. Then one day, I found action_jackson.gem, which was written by <a href="https://github.com/blakefrost/action_jackson">Blake Taylor</a> two years ago. The core implementation of this gem is to define each action as a method, and at last call a class method <code>register_filters</code> to register all these methods as <code>before_filter</code> independently. Of course, they&rsquo;re ordered by the earlier declarations. This implementation is not elegant, but the idea is really awesome, it doesn&rsquo;t break Rails&rsquo;s rules.</p>

<p>Then I got a deep understanding of the Rails controllers filters&rsquo;s implementation mechanism. Maybe <code>skip_before_filter</code> helped. In each <code>step</code>, I insert it first, extract all the inserted steps by <code>skip_before_filter</code>, then sort them by TSort(a topological sorting algorithm provided by Ruby standard library), and at last append them again to before_filters. It works, and all rspecs are passed.</p>

<p>I renamed it from action_jackson to stepstepstep, because the DSL is only a <code>step</code> class method, which handles all the details. Most of the implementations were rewritten, and I added rspecs . Thanks Blake Taylor :)</p>

<p>The project homepage is <a href="http://github.com/eoecn/stepstepstep">http://github.com/eoecn/stepstepstep</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails常见配置问题]]></title>
    <link href="http://mvj3.github.io/2013/03/06/rails-general-configuration-problems/"/>
    <updated>2013-03-06T10:42:41+08:00</updated>
    <id>http://mvj3.github.io/2013/03/06/rails-general-configuration-problems</id>
    <content type="html"><![CDATA[<h2>提示已经安装的gem不在Gemfile里</h2>

<p>最近有时遇到明明已经安装了rake，但是却提示我说有些gem没有在Gemfile里引用。比如：
Could not find rake-0.9.2.2 in any of the sources
Run &lsquo;bundle install&rsquo; to install missing gems.</p>

<p>我所使用的Ruby版本管理环境是rvm，查看下rvm info，发现ruby路径和gem管理路径不一致，因此rvm reload一下就解决了该问题。</p>

<p>rvm不一致的问题还需要查下，推测可能是开启多个SHELL，导致设置不一致～</p>

<h2>assets没有编译</h2>

<p>需要显示指定路径，在config/environments/production.rb里加入
<code>ruby
config.assets.precompile += %w[*js *css]
</code></p>

<h2>development模式下刷新后静态资源不变</h2>

<p>删除public/assets目录下的缓存文件，这样就走动态请求了。</p>

<h2>修复rvm info里ruby版本不一致bug</h2>

<p>在/etc/profile里加一行rvm reload</p>

<h2>修复gem,irb等命令里老是提示ree某个版本的environment不存在</h2>

<p>修改该命令里的ruby环境路径到自己指定的版本</p>

<h2>修复默写外部css引用图片等静态资源不以/assets开头</h2>

<p>把资源及其路径直接拷到/public目录下</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord兼容非正规数据库表名和表字段设计的多对多，一对多关系]]></title>
    <link href="http://mvj3.github.io/2013/01/24/define-many-to-many-and-one-to-many-associations-for-informal-database-table-and-field-design-in-activerecord/"/>
    <updated>2013-01-24T16:07:41+08:00</updated>
    <id>http://mvj3.github.io/2013/01/24/define-many-to-many-and-one-to-many-associations-for-informal-database-table-and-field-design-in-activerecord</id>
    <content type="html"><![CDATA[<p>Rails里的多对多关系声明极其简单，一句 <code>has_and_belongs_to_many :projects</code> 就可表示当前表通过一个中间表来拥有多个projects，唯一的约定就是复数的表名和_id后缀的外键。</p>

<p>但是如果你接手的数据库是在别的不同约定的语言框架里设计的，这样去套用Rails的 <code>has_and_belongs_to_many</code> 就炕爹了，你得一个一个去声明每一个选项，以下就是本人惨痛的经历，其他人看了就不用重蹈覆辙了。</p>

<p>参考：<a href="http://guides.rubyonrails.org/association_basics.html">http://guides.rubyonrails.org/association_basics.html</a> ，和本地的Rails rdoc文档</p>

<p>需求是查出一个用户收藏的所有代码。</p>

<p> 先来看下表结构。用户，收藏，代码三个表结构主要部分如下：
<code>``sql
CREATE TABLE</code>common_member<code>(
 </code>uid<code>mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (</code>uid`),
) ENGINE=MyISAM AUTO_INCREMENT=802058 DEFAULT CHARSET=utf8;</p>

<p>CREATE TABLE <code>common_user_favorite</code> (
  <code>itemid</code> int(11) NOT NULL,
  <code>uid</code> int(11) NOT NULL,
  <code>model</code> enum(&lsquo;blog&rsquo;,&lsquo;code&rsquo;,&lsquo;news&rsquo;,&lsquo;book&rsquo;) NOT NULL,
  <code>create_time</code> int(11) NOT NULL,
  <code>is_delete</code> tinyint(1) NOT NULL DEFAULT &lsquo;0&rsquo;
) ENGINE=InnoDB DEFAULT CHARSET=utf8;</p>

<p>CREATE TABLE <code>code_gists</code> (
  <code>id</code> int(11) NOT NULL AUTO_INCREMENT,
  <code>user_id</code> int(11) DEFAULT NULL,
  <code>created_at</code> datetime NOT NULL,
  <code>updated_at</code> datetime NOT NULL,
  <code>deleted_at</code> tinyint(1) DEFAULT NULL,
  PRIMARY KEY (<code>id</code>),
  KEY <code>index_code_gists_on_deleted_at_and_user_id_and_updated_at</code> (<code>deleted_at</code>,<code>user_id</code>,<code>updated_at</code>)
) ENGINE=InnoDB AUTO_INCREMENT=149 DEFAULT CHARSET=utf8;
```</p>

<p>我们接下来的代码逻辑就是查找出目标用户，通过收藏表，来找出该用户的所有代码。</p>

<p>先声明三个model如下：
<code>ruby
class CommonMember &lt; ActiveRecord::Base
  self.table_name = :common_member
end
class CommonUserFavorite &lt; ActiveRecord::Base
  self.table_name = :common_user_favorite
end
class CodeGist &lt; ActiveRecord::Base
end
</code></p>

<p>接着声明三个model之间的关系
<code>ruby
CommonUserFavoriteConditions = "`common_user_favorite`.`is_delete` = 0 AND `common_user_favorite`.`model` = 'code'"
class CommonMember &lt; ActiveRecord::Base
  has_many :fav_gists, :through =&gt; :favs, :order =&gt; "`common_user_favorite`.`create_time` DESC", :source =&gt; :gist
  has_many :favs, :class_name =&gt; CommonUserFavorite, :foreign_key =&gt; :uid, :conditions =&gt; CommonUserFavoriteConditions
end
class CommonUserFavorite &lt; ActiveRecord::Base
  belongs_to :gist, :class_name =&gt; CodeGist, :foreign_key =&gt; :itemid
end
class CodeGist &lt; ActiveRecord::Base
  has_many :favs, :class_name =&gt; CommonUserFavorite, :foreign_key =&gt; :itemid, :conditions =&gt; CommonUserFavoriteConditions
end
</code></p>

<p>以下是解释</p>

<p>先声明收藏表(CommonUserFavorite) <code>belongs_to</code> 代码表(CodeGist)，指定 收藏表(CommonUserFavorite)  的外键是:itemid，关联的代码表(CodeGist)的主键是:id。示例如：
<code>CommonUserFavorite.where(:model =&gt; 'code').first.gist</code>
<code>``sql
SELECT</code>common_user_favorite`.*</p>

<pre><code>    FROM `common_user_favorite`
    WHERE `common_user_favorite`.`model` = 'code'
    LIMIT 1;
</code></pre>

<p>SELECT <code>code_gists</code>.*</p>

<pre><code>    FROM `code_gists`
    WHERE `code_gists`.`id` = 43 AND (`code_gists`.`deleted_at` IS NULL)
    LIMIT 1;
</code></pre>

<p>```</p>

<p>再声明代码表(CodeGist) <code>has_many</code> 收藏表(CommonUserFavorite) ，指定 收藏表(CommonUserFavorite)  的外键是 :itemid，且查询条件是 <code>:conditions =&gt; ["common_user_favorite.model = 'code'"]</code> 。示例如： <code>CodeGist.last.favs</code>
<code>``sql
SELECT</code>code_gists`.*</p>

<pre><code>    FROM `code_gists`
    WHERE (`code_gists`.`deleted_at` IS NULL)
    ORDER BY `code_gists`.`id` DESC
    LIMIT 1;
</code></pre>

<p>SELECT <code>common_user_favorite</code>.*</p>

<pre><code>    FROM `common_user_favorite`
    WHERE `common_user_favorite`.`itemid` = 107
            AND (`common_user_favorite`.`is_delete` = 0
            AND `common_user_favorite`.`model` = 'code');
</code></pre>

<p>```</p>

<p>最后声明是用户表(CommonMember)对代码表(CodeGist)的has_many 是通过 用户表(CommonMember)对收藏表(CommonUserFavorite)的has_many 和 收藏表(CommonUserFavorite)对代码表(CodeGist)的belongs_to 共同实现的，这两个声明关系分别表述为  <code>:through =&gt; :favs</code> 和  <code>:source =&gt; :gist</code>。各自的示例如：</p>

<p><code>cm = CommonMember.where(:uid =&gt; 470700).first</code>
<code>``sql
SELECT</code>common_member`.*</p>

<pre><code>    FROM `common_member`
    WHERE `common_member`.`uid` = 470700
    LIMIT 1;
</code></pre>

<p>```</p>

<p><code>cm.fav_gists</code>
<code>``sql
SELECT</code>code_gists`.*</p>

<pre><code>    FROM `code_gists`
    INNER JOIN `common_user_favorite`
          ON `code_gists`.`id` = `common_user_favorite`.`itemid`
    WHERE `common_user_favorite`.`uid` = 470700
          AND (`code_gists`.`deleted_at` IS NULL)
          AND (`common_user_favorite`.`is_delete` = 0
          AND `common_user_favorite`.`model` = 'code')
    ORDER BY `common_user_favorite`.`create_time` DESC;
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails解决JSON数据跨域问题 Access Control Allow Origin not allowed by]]></title>
    <link href="http://mvj3.github.io/2013/01/15/fix-json-cross-domain/"/>
    <updated>2013-01-15T15:09:03+08:00</updated>
    <id>http://mvj3.github.io/2013/01/15/fix-json-cross-domain</id>
    <content type="html"><![CDATA[<p>XMLHttpRequest请求在不同域名下会出现"Access Control Allow Origin not allowed by"消息，即使是不同子域名，或根域名和子域名，也会出现这种情况。</p>

<p>详情见 <a href="https://developer.mozilla.org/en/http_access_control">https://developer.mozilla.org/en/http_access_control</a></p>

<p>rails控制器的方法加下以下声明即可
<code>ruby
response.header['Access-Control-Allow-Origin'] = '*'
response.header['Content-Type'] = 'text/javascript'
</code></p>
]]></content>
  </entry>
  
</feed>
