<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Unicorn | 世界的审美！]]></title>
  <link href="http://mvj3.github.io/blog/categories/unicorn/atom.xml" rel="self"/>
  <link href="http://mvj3.github.io/"/>
  <updated>2013-12-22T19:02:25+08:00</updated>
  <id>http://mvj3.github.io/</id>
  <author>
    <name><![CDATA[mvj3]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unicorn 和 Nginx 部署Rails应用的 css, js, img 等静态资源缓存使用总结]]></title>
    <link href="http://mvj3.github.io/2012/12/14/the-usage-summary-of-deploy-rails-css-js-img-etc-static-cached-assets-via-unicorn-and-nginx/"/>
    <updated>2012-12-14T09:41:54+08:00</updated>
    <id>http://mvj3.github.io/2012/12/14/the-usage-summary-of-deploy-rails-css-js-img-etc-static-cached-assets-via-unicorn-and-nginx</id>
    <content type="html"><![CDATA[<h2>nginx方案</h2>

<p>接上文 <a href="https://gist.github.com/4174674">Rails动态文件添加ETag缓存</a> 来自动生成304 Not Modified告诉客户端来直接使用本地缓存，但是在这种情况下会出现图片闪动（重新加载渲染），影响用户体验。除了Etag这种通过和服务器进行HTTP头部比对来实现缓存的策略外，还可以采用Cache-control来通知浏览器在一段时间内不必重新请求服务器而直接本地缓存。配置 nginx.conf 如下:</p>

<p>```nginx</p>

<h1>使用root用户来避免文件权限问题而导致403错误</h1>

<p>user  root nginx;</p>

<h1>在server { } 里加入Cache-Control声明</h1>

<p>location ~ ^/(assets)/  {<br/>
  gzip_static on;<br/>
  expires     1h;<br/>
  add_header  Cache-Control public;<br/>
}<br/>
```</p>

<p>配置 config/environments/production.rb 如下:
```ruby</p>

<h1>Disable Rails&rsquo;s static asset server (Apache or nginx will already do this)</h1>

<p>config.serve_static_assets = false</p>

<h1>Compress JavaScripts and CSS</h1>

<p>config.assets.compress = true</p>

<h1>Don&rsquo;t fallback to assets pipeline if a precompiled asset is missed</h1>

<p>config.assets.compile = true</p>

<h1>Generate digests for assets URLs</h1>

<p>config.assets.digest = true</p>

<h1>指定需要预先编译的css和js</h1>

<p>config.assets.precompile += %w[js css].map {|ext| Dir[Rails.root.join(&ldquo;app/assets/<em>/</em>.#{ext}&rdquo;)] }.flatten.map {|f| f.split(&lsquo;/&rsquo;)[-1] }<br/>
```</p>

<p>每次重新部署前运行RAILS_ENV=production bundle exec rake assets:precompile 来重新生成静态资源缓存</p>

<h2>Rack方案</h2>

<p><a href="https://github.com/mvj3/rack_image_assets_cache_control/">https://github.com/mvj3/rack_image_assets_cache_control/</a></p>
]]></content>
  </entry>
  
</feed>
